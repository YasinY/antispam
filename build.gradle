
plugins {
	id 'java'
	id 'jacoco'
}

repositories {
	maven {
		url = 'http://repo.runelite.net'
	}
	mavenCentral()
}

def runeLiteVersion = 'latest.release'

dependencies {
    compileOnly group: 'net.runelite', name:'client', version: runeLiteVersion
    compileOnly 'org.projectlombok:lombok:1.18.4'
    annotationProcessor 'org.projectlombok:lombok:1.18.4'
    compileOnly 'com.google.code.findbugs:jsr305:3.0.2'

    implementation "org.apache.commons:commons-csv:1.4"

    testImplementation 'junit:junit:4.12'
    testImplementation 'org.slf4j:slf4j-simple:1.7.12'
    testImplementation group: 'net.runelite', name:'client', version: runeLiteVersion, {
        exclude group: 'ch.qos.logback', module: 'logback-classic'
    }
}

group = 'com.antibeggar'
version = project.findProperty('releaseVersion') ?: '1.0.0'
sourceCompatibility = '1.8'

tasks.withType(JavaCompile) {
	options.encoding = 'UTF-8'
}

// JaCoCo Configuration for Code Coverage
jacoco {
	toolVersion = "0.8.7"
}

jacocoTestReport {
	dependsOn test

	reports {
		xml.required = true
		xml.outputLocation = file("${buildDir}/reports/jacoco/test/jacocoTestReport.xml")
		html.required = true
		html.outputLocation = file("${buildDir}/reports/jacoco/html")
		csv.required = false
	}

	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, exclude: [
				'**/ui/**',
				'**/plugin/PluginRunner.class'
			])
		}))
	}
}

test {
	finalizedBy jacocoTestReport
}

task coverage {
	dependsOn test, jacocoTestReport
	description = 'Runs tests and generates coverage report'
	group = 'verification'
}

// JAR Configuration for Releases
jar {
	manifest {
		attributes(
			'Implementation-Title': 'Anti-Spam Plugin',
			'Implementation-Version': project.version,
			'Main-Class': 'com.antispam.AntiBeggarPlugin'
		)
	}

	// Include all runtime dependencies in the JAR
	from {
		configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
	}

	// Exclude signatures to avoid conflicts
	exclude 'META-INF/*.RSA', 'META-INF/*.SF', 'META-INF/*.DSA'

	archiveBaseName = 'antispam-plugin'
	archiveVersion = project.version
}

// Task to build release-ready JAR
task releaseJar(type: Copy) {
	dependsOn jar
	from jar
	into "${buildDir}/release"
	rename { "${project.name}-${project.version}.jar" }

	doLast {
		println "Release JAR created at: ${buildDir}/release/${project.name}-${project.version}.jar"
	}
}
